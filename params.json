{"name":"Mamba","tagline":"The definitive testing tool for Python. Born under the banner of Behavior Driven Development.","body":"#mamba: the definitive testing tool for Python\r\n\r\n[![Build Status](https://travis-ci.org/nestorsalceda/mamba.svg)](https://travis-ci.org/nestorsalceda/mamba)\r\n\r\nmamba is the definitive BDD testing framework for Python. Born under the banner of Behavior Driven Development.\r\n\r\n##Installation\r\n\r\nTo install mamba, just:\r\n\r\n``` sh\r\npip install mamba\r\n```\r\n\r\n##Overview\r\n\r\n```python\r\n\r\n\r\nwith description('mamba'):\r\n    with it('is tested with mamba itself'):\r\n        pass\r\n\r\n    with it('supports python 3'):\r\n        pass\r\n\r\n    with context('when listing features'):\r\n        with it('supports example groups'):\r\n            pass\r\n\r\n        with context('hooks'):\r\n            with before.all:\r\n                print 'This code will be run once, before all examples'\r\n\r\n            with before.each:\r\n                print 'This code will be run before each example'\r\n\r\n            with after.each:\r\n                print 'This code will be run after each example'\r\n\r\n            with after.all:\r\n                print 'This code will be run once, after all examples'\r\n\r\n        with context('pending tests'):\r\n            with _context('when running pending contexts (marked with a underscore)'):\r\n                with it('will not run any spec under a pending context'):\r\n                    pass\r\n\r\n            with _it('will not run pending specs (marked with underscore)'):\r\n                pass\r\n\r\n        with it('highlights slow tests'):\r\n            sleep(10)\r\n\r\n        with context(ASampleClass):\r\n            with it('has an instance in subject property'):\r\n                expect(self.subject).to.be.a(ASampleClass)\r\n\r\n    with context('when writing assertions'):\r\n        with it('can be used with plain assertions'):\r\n            assert True\r\n\r\n        with it('can be used with hamcrest style assertions'):\r\n            assert_that(True, is_(True))\r\n\r\n        with it('can be used with should_dsl style assertions'):\r\n            True |should| be(True)\r\n\r\n        with it('can be used with sure style assertions'):\r\n            True.should.be.true\r\n\r\n            expect(True).to.be.true\r\n\r\n        with it('is assertion framework agnostic'):\r\n            pass\r\n\r\n    with context('when using tests doubles'):\r\n        with it('can be used with mockito'):\r\n            stub = mock()\r\n            when(stub).is_usable_with_mockito().thenReturn(True)\r\n\r\n            expect(stub.is_usable_with_mockito()).to.be.true\r\n\r\n        with it('can be used with doublex'):\r\n            with Spy() as sender:\r\n                sender.is_usable_with_doublex().returns(True)\r\n\r\n            assert_that(sender.is_usable_with_doublex(), is_(True))\r\n            assert_that(sender.is_usable_with_doublex, called())\r\n\r\n        with it('can be used with mock'):\r\n            is_usable_with_mock = Mock(return_value=True)\r\n\r\n            assert mock()\r\n\r\n        with it('is test doubles framework agnostic'):\r\n            pass\r\n\r\n```\r\n\r\n\r\n##Contribute\r\n\r\nIf you'd like to contribute, fork [repository](http://github.com/nestorsalceda/mamba), and send a pull request.\r\n","google":"UA-39774055-1","note":"Don't delete this file! It's used internally to help with page regeneration."}