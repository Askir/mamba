{"name":"Mamba","tagline":"The definitive testing tool for Python. Born under the banner of Behavior Driven Development.","body":"#mamba: the definitive testing tool for Python\r\n\r\n[![Build Status](https://travis-ci.org/nestorsalceda/mamba.png)](https://travis-ci.org/nestorsalceda/mamba)\r\n\r\nmamba is the definitive BDD testing framework for Python. Born under the banner of Behavior Driven Development.\r\n\r\n##Installation\r\n\r\nTo install mamba, just:\r\n\r\n``` sh\r\npip install mamba\r\n```\r\n\r\n##Overview\r\n\r\n```python\r\n\r\nfrom mamba import describe, context, before, after, pending\r\n\r\nwith describe('mamba'):\r\n    def it_should_be_tested_with_mamba_itself():\r\n        pass\r\n\r\n    with context('when listing features'):\r\n        def it_supports_example_groups():\r\n            pass\r\n\r\n        with context('hooks'):\r\n            @before.all\r\n            def run_once_before_specs():\r\n                pass\r\n\r\n            @before.each\r\n            def run_before_every_spec():\r\n                pass\r\n\r\n            @after.each\r\n            def run_after_every_spec():\r\n                pass\r\n\r\n            @after.all\r\n            def run_after_all_specs():\r\n                pass\r\n\r\n        with context('pending tests'):\r\n            with pending(context('when running pending contexts')):\r\n                def it_should_not_run_specs_under_a_pending_context():\r\n                    pass\r\n\r\n            @pending\r\n            def it_should_not_run_a_spec_marked_with_pending_decorator():\r\n                pass\r\n\r\n        def it_should_highlight_slow_tests():\r\n            sleep(10)\r\n\r\n        with context(ASampleClass) as _:\r\n            def it_should_have_an_instance_in_subject_property():\r\n                expect(_.subject).to.be.a(ASampleClass)\r\n\r\n    with context('when writing assertions'):\r\n        def it_should_be_usable_with_plain_assertions():\r\n            assert True\r\n\r\n        def it_should_be_usable_with_hamcrest_style_assertions():\r\n            assert_that(True, is_(True))\r\n\r\n        def it_should_be_usable_with_should_dsl_style_assertions():\r\n            True |should| be(True)\r\n\r\n        def it_should_be_usable_with_sure_style_assertions():\r\n            True.should.be.true\r\n\r\n            expect(True).to.be.true\r\n\r\n        def it_should_be_assertion_framework_agnostic():\r\n            pass\r\n\r\n    with context('when using tests doubles'):\r\n        def it_should_be_usable_with_mockito():\r\n            stub = mock()\r\n            when(stub).is_usable_with_mockito().thenReturn(True)\r\n\r\n            expect(stub.is_usable_with_mockito()).to.be.true\r\n\r\n        def it_should_be_usable_with_doublex():\r\n            with Spy() as sender:\r\n                sender.is_usable_with_doublex().returns(True)\r\n\r\n            assert_that(sender.is_usable_with_doublex(), is_(True))\r\n            assert_that(sender.is_usable_with_doublex, called())\r\n\r\n        def it_should_be_usable_with_mock():\r\n            is_usable_with_mock = Mock(return_value=True)\r\n\r\n            assert mock()\r\n\r\n        def it_should_be_test_doubles_framework_agnostic():\r\n            pass\r\n```\r\n\r\n\r\n##Contribute\r\n\r\nIf you'd like to contribute, fork [repository](http://github.com/nestorsalceda/mamba), and send a pull request.\r\n","google":"UA-39774055-1","note":"Don't delete this file! It's used internally to help with page regeneration."}